<!-- INCLUDE src/reveal.header -->


<section data-background="#00CCFF">
<h2>El Software</h2>
</section>


<section>
<h2>Traductores</h2>
<ul>
    <li>Un programa</li>
	<ul>
	<li>Recibe datos, opera con ellos y genera un resultado o salida</li>
	</ul>
</ul>
<img src="img/prog0.png" class="plain">
</section>
<section>
<h2>Traductores</h2>
<ul>
    <li>Un programa <b>traductor</b></li>
	<ul>
	<li>Recibe datos que son a su vez un programa en algún lenguaje de programación</li>
	<li>Su resultado o salida es a su vez un programa en algún otro lenguaje de programación</li>
	</ul>
</ul>
<img src="img/prog1.png" class="plain">
</section>

<section data-transition="slide-in fade-out">
<h2>Ensamblador x86</h2>
	<div><pre class="stretch"><code>
	<!-- INCLUDE img/ASM-hello.s -->
	</code></pre></div>
</section>
<section data-transition="fade-in slide-out">
<h2>Procesador x86</h2>
<div><img src="img/ASM-intel.jpg" class="plain stretch"></div>
</section>

<section data-transition="slide-in fade-out">
<h2>Ensamblador ARM</h2>
	<div><pre class="stretch"><code>
	<!-- INCLUDE img/ARM-hello.txt -->
	</code></pre></div>
</section>
<section data-transition="fade-in slide-out">
<h2>Procesador ARM</h2>
<div><img src="img/ARM-IPad_3.png" class="plain stretch"></div>
</section>

<section data-transition="slide-in fade-out">
<h2>Ensamblador PowerPC</h2>
<div><pre class="stretch"><code>
<!-- INCLUDE img/ASM-POWERPC.txt -->
</code></pre></div>
</section>
<section data-transition="fade-in slide-out">
<h2>Procesador PowerPC</h2>
<div><img src="img/ASM-POWERPC-PS3.jpg" class="plain stretch"></div>
</section>


<section>
<h2>Lenguajes de programación</h2>
<ul>
	<li>Orientación a la máquina o al problema</li>
	<span class="fragment">
	<li>Lenguaje de alto nivel</li>
	<ul>
		<li>SALDO = DEUDA - PAGO</li>
	</ul>
	</span>
	<span class="fragment">
	<li>Ensamblador</li>
	<ul>
		<li>LD DEUDA; SUB PAGO; ST DEUDA</li>
	</ul>
	</span>
	<span class="fragment">
	<li>Código de máquina</li>
	<ul>
		<li>01001010; 01101011; 10101010</li>
	</ul>
	</span>
</ul>
</section>
<section data-transition="slide-in fade-out">
<h2>Lenguajes y niveles</h2>
<img src="img/lenguajes-0.png" class="stretch plain">
</section>
<section data-transition="slide-out fade-in">
<h2>Lenguajes y niveles</h2>
<img src="img/lenguajes-1.png" class="stretch plain">
</section>


<section>
<h2>Terminología</h2>
<ul>
	<li>Programa traductor</li>
	<ul>
		<li>Compilador</li>
		<li>Intérprete</li>
	</ul>
	<li>Archivo fuente</li>
	<li>Archivo objeto</li>
	<li>Bibliotecas</li>
	<li>Programa ejecutable</li>
</ul>
</section>


<section>
<h2>Traductores</h2>
<div class="double">
	<div>
	<ul>
		<li>Compiladores</li>
		<span class="fragment">
			<ul>
				<li>Traducen un programa fuente en un ejecutable en código máquina</li> 
				<li>La ejecución queda diferida para un momento posterior</li> 
			</ul>
		</span>
	</ul>
	</div>
	<div>
	<ul>
		<li>Intérpretes</li>
		<span class="fragment">
			<ul>
				<li>Traducen y ejecutan línea por línea un programa fuente</li> 
				<li>Traducción y ejecución son concurrentes</li> 
			</ul>
		</span>
	</ul>
	</div>
</div>
</section>

<section>
<h2>Traductores</h2>
<div class="double">
  <div>
  <ul>
	<li>Compiladores</li>
	<span class="fragment">
	<ul>
		<li>La ejecución de un programa compilado es tan rápida como es posible</li> 
		<li>El programa queda compilado para una única arquitectura</li> 
	</ul>
	</span>
  </ul>
  </div>
  <div>
  <ul>
	<li>Intérpretes</li>
	<span class="fragment">
	<ul>
		<li>La ejecución del programa comparte la CPU con la traducción del fuente</li> 
		<li>El mismo programa fuente puede correr sin modificaciones en varias arquitecturas</li> 
	</ul>
	</span>
</ul>
</div>
</div>
</section>

<section data-transition="slide-in fade-out">
<h2>Ciclo de compilación</h2>
<img src="img/ciclo1.png" class="stretch plain">
</section>
<section data-transition="fade-out fade-in">
<h2>Ciclo de compilación</h2>
<img src="img/ciclo2.png" class="stretch plain">
</section>
<section data-transition="fade-out fade-in">
<h2>Ciclo de compilación</h2>
<img src="img/ciclo3.png" class="stretch plain">
</section>
<!--
<section data-transition="fade-out fade-in">
<h2>Ciclo de compilación</h2>
<img src="img/fases-0.png" class="stretch plain">
</section>
-->
<section data-transition="fade-out fade-in">
<h2>Ciclo de compilación</h2>
<img src="img/fases-1.png" class="stretch plain">
</section>

<section data-transition="fade-out fade-in">
<h2>Ciclo de compilación</h2>
<img src="img/fases-2.png" class="stretch plain">
</section>

<section data-transition="fade-out fade-in">
<h2>Ciclo de compilación</h2>
<img src="img/fases-3.png" class="stretch plain">
</section>


<section data-transition="fade-out fade-in">
<h2>Ciclo de compilación</h2>
<img src="img/fases-4.png" class="stretch plain">
</section>


<section data-transition="slide-out fade-in">
<h3>Entorno integrado de desarrollo (IDE)</h3>
<img src="img/eclipse.png" class="stretch plain">
</section>


<section>
<h2>Paradigmas de lenguajes de programación</h2>
<ol>
	<li>Imperativo</li>
	<ul>
		<li>Seguir una lista de órdenes o comandos</li>
	</ul>
	<li>Lógico o declarativo</li>
	<ul>
		<li>Responder una pregunta buscando una solución</li>
	</ul>
	<li>Funcional</li>
	<ul>
		<li>Evaluar una expresión y utilizar el resultado</li>
	</ul>
	<li>Orientación a objetos</li>
	<ul>
		<li>Comunicar mensajes entre objetos simulando una parte del mundo real</li>
	</ul>
</ol>
</section>

<section data-transition="convex">
<h2>1. Paradigma imperativo</h2>
<h3>Lenguaje C</h3>
<pre class="stretch"><code>
int factorial(int n)
{
	int f = 1;
	while (n > 1) {
		f *= n;
		n--;
	}
	return f;
}

</code></pre>
</section>

<section data-transition="convex">
<h2>2. Paradigma lógico</h2>
<h3>Lenguaje Prolog</h3>
<pre class="stretch"><code>
factorial(0,X):- X=1.
factorial(N,X):- N1=N-1, factorial(N1,X1), X=X1*N.
factorial(N):- factorial(N,X), write(X).

</code></pre>
</section>

<section data-transition="convex">
<h2>3. Paradigma funcional</h2>
<h3>Lenguaje Lisp</h3>
<pre class="stretch"><code>
(defun factorial (n)
  (if (= n 0)
      1
      (* n (factorial (- n 1))) ) )
</code></pre>
</section>

<section data-transition="convex">
<h2>4. Paradigma orientado a objetos</h2>
<h3>Lenguaje Python</h3>
<pre class="stretch"><code>
class Combinatoria():
    def factorial(self,n): 
        num = 1
        while n > 1:
            num = num * n
            n = n - 1
        return num

c = Combinatoria()
a = c.factorial(3)
print a
</code></pre>
</section>



<!-- INCLUDE src/reveal.trailer -->
